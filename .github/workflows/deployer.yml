name: PaaS Application Builder and Deployer

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'The owner of the user repo'
        required: true
        type: string
      repo:
        description: 'The name of the user repo'
        required: true
        type: string
      railwayServiceId:
        description: 'The ID of the Railway service to update'
        required: true
        type: string
      githubRepoId:
        description: 'The unique ID of the GitHub repository'
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Check out User's Code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repo }}
          path: ./user-code

      - name: 2. Generate Dockerfile with Buildpack
        run: |
          CODE_PATH="./user-code"
          DOCKERFILE_PATH="./user-code/Dockerfile.generated"
          
          if [ -f "$CODE_PATH/package.json" ]; then
            echo "-> Node.js project detected"
            cat <<EOF > $DOCKERFILE_PATH
FROM node:18-alpine
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install --production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
EOF
          else
            echo "-> Error: Unknown project type. No package.json found."
            exit 1
          fi

      # THIS IS THE NEW, SIMPLIFIED DEPLOYMENT PROCESS
      # We no longer need GHCR. We will build and deploy directly to Railway.

      - name: 3. Set up the Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: 4. Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ inputs.railwayServiceId }}
        run: |
          echo "Starting direct deployment to Railway service: $RAILWAY_SERVICE_ID"
          railway up --service "$RAILWAY_SERVICE_ID" --path ./user-code