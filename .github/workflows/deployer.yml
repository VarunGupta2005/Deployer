name: PaaS Application Builder

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'The owner of the user repo'
        required: true
        type: string
      repo:
        description: 'The name of the user repo'
        required: true
        type: string
      railwayServiceId:
        description: 'The ID of the Railway service to update'
        required: true
        type: string
      githubRepoId:
        description: 'The unique ID of the GitHub repository'
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Check out User's Code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repo }}
          path: ./user-code

      - name: 2. Generate Dockerfile with Buildpack
        run: |
          CODE_PATH="./user-code"
          DOCKERFILE_PATH="./user-code/Dockerfile.generated"
          
          if [ -f "$CODE_PATH/package.json" ]; then
            echo "-> Node.js project detected"
            echo "FROM node:18-alpine" > "$DOCKERFILE_PATH"
            echo "WORKDIR /usr/src/app" >> "$DOCKERFILE_PATH"
            echo "COPY package*.json ./" >> "$DOCKERFILE_PATH"
            echo "RUN npm install --production" >> "$DOCKERFILE_PATH"
            echo "COPY . ." >> "$DOCKERFILE_PATH"
            echo "EXPOSE 3000" >> "$DOCKERFILE_PATH"
            echo 'CMD ["npm", "start"]' >> "$DOCKERFILE_PATH"
          else
            echo "-> Error: Unknown project type. No package.json found."
            exit 1
          fi

      - name: 3. Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: 4. Deploy to Railway
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ inputs.railwayServiceId }}
        run: |
          echo "Deploying to Railway service: $RAILWAY_SERVICE_ID"
          cd ./user-code
          
          # Check if token is available
          if [ -z "$RAILWAY_API_TOKEN" ]; then
            echo "ERROR: RAILWAY_API_TOKEN secret is missing or empty in the repository."
            exit 1
          fi
          
          # Debug token format (show first/last few characters)
          echo "Token format check: ${RAILWAY_API_TOKEN:0:8}...${RAILWAY_API_TOKEN: -8}"
          
          # Set Railway token for CLI authentication
          export RAILWAY_API_TOKEN="$RAILWAY_API_TOKEN"
          
          # Create railway config directory and token file (alternative auth method)
          mkdir -p ~/.railway
          echo "$RAILWAY_API_TOKEN" > ~/.railway/token
          
          # Try to verify authentication
          echo "Verifying Railway authentication..."
          if ! railway whoami; then
            echo "CLI authentication failed. Trying source-based deployment via API..."
            
            # Token works for API access, let's try different deployment approaches
            echo "Testing API access..."
            PROJECT_INFO=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
              -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "query": "query { me { id email } }"
              }')
            echo "API Response: $PROJECT_INFO"
            
            # Try to get service information first
            echo "Getting service information..."
            SERVICE_INFO=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
              -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "query": "query service($id: String!) { service(id: $id) { id name deployments { edges { node { id status } } } } }",
                "variables": {
                  "id": "'$RAILWAY_SERVICE_ID'"
                }
              }')
            echo "Service Info: $SERVICE_INFO"
            
            # Try creating a deployment with minimal required fields
            echo "Creating deployment..."
            DEPLOY_RESPONSE=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
              -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "query": "mutation deploymentCreate($input: DeploymentCreateInput!) { deploymentCreate(input: $input) { id status createdAt } }",
                "variables": {
                  "input": {
                    "serviceId": "'$RAILWAY_SERVICE_ID'"
                  }
                }
              }')
            echo "Deploy Response: $DEPLOY_RESPONSE"
            
            echo "Deployment attempt completed via API"
          else
            echo "CLI authentication successful, linking to project..."
            
            # Get project info from service first
            echo "Getting project info from service..."
            PROJECT_RESPONSE=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
              -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "query": "query service($id: String!) { service(id: $id) { project { id name } } }",
                "variables": {
                  "id": "'$RAILWAY_SERVICE_ID'"
                }
              }')
            echo "Project Response: $PROJECT_RESPONSE"
            
            PROJECT_ID=$(echo "$PROJECT_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
            PROJECT_NAME=$(echo "$PROJECT_RESPONSE" | grep -o '"name":"[^"]*"' | head -1 | cut -d'"' -f4)
            
            if [ -n "$PROJECT_ID" ]; then
              echo "Found project ID: $PROJECT_ID, Name: $PROJECT_NAME"
              
              # Create railway config manually since interactive link is failing
              mkdir -p ~/.railway
              echo '{"project":"'$PROJECT_ID'","service":"'$RAILWAY_SERVICE_ID'"}' > ~/.railway/config.json
              echo "Created Railway config file"
              
              # Verify the link worked
              railway status || echo "Status check failed, but proceeding with deployment"
            fi
            
            # Deploy with Railway CLI
            echo "Starting Railway deployment..."
            railway up || echo "Railway up failed"
          fi