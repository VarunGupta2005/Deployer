name: PaaS Application Builder

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'The owner of the user repo'
        required: true
        type: string
      repo:
        description: 'The name of the user repo'
        required: true
        type: string
      railwayServiceId:
        description: 'The ID of the Railway service to update'
        required: true
        type: string
      githubRepoId:
        description: 'The unique ID of the GitHub repository'
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write   # required for GHCR push

    steps:
      - name: 1. Check out User's Code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repo }}
          path: ./user-code

      - name: 2. Generate Dockerfile with Buildpack
        run: |
          CODE_PATH="./user-code"
          DOCKERFILE_PATH="$CODE_PATH/Dockerfile.generated"

          if [ -f "$CODE_PATH/package.json" ]; then
            echo "-> Node.js project detected"
            cat <<EOF > "$DOCKERFILE_PATH"
            FROM node:18-alpine
            WORKDIR /usr/src/app
            COPY package*.json ./
            RUN npm install --production
            COPY . .
            EXPOSE 3000
            CMD ["npm", "start"]
            EOF
          else
            echo "❌ Error: Unknown project type. No package.json found."
            exit 1
          fi

          echo "✅ Generated Dockerfile:"
          cat "$DOCKERFILE_PATH"

      - name: 3. Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 4. Build & Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')

          echo "📦 Building Docker image: $IMAGE_NAME"
          docker build -f ./user-code/Dockerfile.generated -t $IMAGE_NAME ./user-code

          echo "🚀 Pushing Docker image to GHCR..."
          docker push $IMAGE_NAME

          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: 5. Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: 6. Deploy to Railway
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ inputs.railwayServiceId }}
          GHCR_USERNAME: ${{ github.actor }}
          GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deploying to Railway service: $RAILWAY_SERVICE_ID"

          if [ -z "$RAILWAY_API_TOKEN" ]; then
            echo "❌ ERROR: RAILWAY_API_TOKEN secret is missing."
            exit 1
          fi

          IMAGE_NAME=${IMAGE_NAME:-ghcr.io/${{ github.repository }}:latest}

          echo "🔑 Setting up Railway token..."
          mkdir -p ~/.railway
          echo "$RAILWAY_API_TOKEN" > ~/.railway/token

          echo "📡 Updating Railway service to use GHCR image..."
          UPDATE_RESPONSE=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation{serviceUpdate(id:\\\"$RAILWAY_SERVICE_ID\\\",input:{source:{image:\\\"$IMAGE_NAME\\\",imageCredentials:{username:\\\"$GHCR_USERNAME\\\",password:\\\"$GHCR_PASSWORD\\\"}}}){id}}\"}")

          echo "Service update response: $UPDATE_RESPONSE"

          echo "🚀 Triggering deployment..."
          DEPLOY_RESPONSE=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation{deploymentCreate(input:{serviceId:\\\"$RAILWAY_SERVICE_ID\\\"}){id status}}\"}")

          echo "Deployment response: $DEPLOY_RESPONSE"
