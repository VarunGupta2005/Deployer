name: PaaS Application Builder (Prebuilt Image)

on:
  workflow_dispatch:
    inputs:
      owner:
        description: 'The owner of the user repo'
        required: true
        type: string
      repo:
        description: 'The name of the user repo'
        required: true
        type: string
      railwayServiceId:
        description: 'The ID of the Railway service to update'
        required: true
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write   # required to push to GHCR

    steps:
      # 1. Checkout user repo
      - name: Checkout User's Code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repo }}
          path: ./user-code

      # 2. Generate Dockerfile for user's code
      - name: Generate Dockerfile
        run: |
          cd ./user-code
          
          # Check if Dockerfile already exists
          if [ -f "Dockerfile" ]; then
            echo "Dockerfile already exists, using existing file"
          else
            echo "No Dockerfile found, generating one..."
            
            # Detect project type and generate appropriate Dockerfile
            if [ -f "package.json" ]; then
              echo "Node.js project detected"
              echo "FROM node:18-alpine" > Dockerfile
              echo "WORKDIR /usr/src/app" >> Dockerfile
              echo "COPY package*.json ./" >> Dockerfile
              echo "RUN npm install --production" >> Dockerfile
              echo "COPY . ." >> Dockerfile
              echo "EXPOSE 3000" >> Dockerfile
              echo 'CMD ["npm", "start"]' >> Dockerfile
            elif [ -f "requirements.txt" ]; then
              echo "Python project detected"
              echo "FROM python:3.9-slim" > Dockerfile
              echo "WORKDIR /usr/src/app" >> Dockerfile
              echo "COPY requirements.txt ./" >> Dockerfile
              echo "RUN pip install --no-cache-dir -r requirements.txt" >> Dockerfile
              echo "COPY . ." >> Dockerfile
              echo "EXPOSE 8000" >> Dockerfile
              echo 'CMD ["python", "app.py"]' >> Dockerfile
            else
              echo "Unknown project type, creating generic Dockerfile"
              echo "FROM alpine:latest" > Dockerfile
              echo "WORKDIR /usr/src/app" >> Dockerfile
              echo "COPY . ." >> Dockerfile
              echo "EXPOSE 8080" >> Dockerfile
              echo 'CMD ["echo", "Please configure your application startup command"]' >> Dockerfile
            fi
          fi
          
          echo "Generated Dockerfile:"
          cat Dockerfile

      # 3. Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # 3. Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "Building image $IMAGE_NAME"
          docker build -t $IMAGE_NAME ./user-code

      # 4. Push Docker image
      - name: Push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "Pushing image $IMAGE_NAME"
          docker push $IMAGE_NAME

      # 5. Install Railway CLI
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      # 6. Deploy prebuilt image to Railway
      - name: Deploy to Railway
        env:
          RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ inputs.railwayServiceId }}
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}:latest
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')

          # Authenticate Railway
          mkdir -p ~/.railway
          echo "$RAILWAY_API_TOKEN" > ~/.railway/token
          railway whoami

          # Get project info via API to avoid interactive prompts
          PROJECT_INFO=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
            -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "query service($id: String!) { service(id: $id) { project { id } } }",
              "variables": { "id": "'$RAILWAY_SERVICE_ID'" }
            }')
          
          PROJECT_ID=$(echo "$PROJECT_INFO" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
          echo "Found project ID: $PROJECT_ID"

          # Deploy using Railway CLI with explicit project and service flags
          echo "Deploying image $IMAGE_NAME to Railway..."
          cd ./user-code
          
          # Try different Railway deployment approaches
          if railway up --image "$IMAGE_NAME" --service "$RAILWAY_SERVICE_ID"; then
            echo "Deployment successful with service flag"
          elif railway deploy --image "$IMAGE_NAME" --service "$RAILWAY_SERVICE_ID"; then
            echo "Deployment successful with deploy command"
          else
            echo "CLI deployment failed, trying API deployment..."
            
            # Fallback to API deployment
            API_RESPONSE=$(curl -s -X POST "https://backboard.railway.app/graphql/v2" \
              -H "Authorization: Bearer $RAILWAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "query": "mutation deploymentCreate($input: DeploymentCreateInput!) { deploymentCreate(input: $input) { id status } }",
                "variables": {
                  "input": {
                    "serviceId": "'$RAILWAY_SERVICE_ID'",
                    "meta": { "image": "'$IMAGE_NAME'" }
                  }
                }
              }')
            echo "API deployment response: $API_RESPONSE"
          fi
